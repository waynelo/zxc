#定义LOG输出级别，第一个参数为输出级别，后面配置日志输出地，可设置多个参数，可自定义命名，只要与后面的名字对应
log4j.rootLogger=debug,Console
#定义日志输出目的地为控制台
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Threshold = info
log4j.appender.Console.Target=System.out
#指定日志输出格式，下面一行是指定具体的格式
log4j.appender.Console.layout = org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%p] [%d{yyyy-MM-dd HH\:mm\:ss}] [%c] - %m%n


#配置输出到文件的日志
#文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.File = org.apache.log4j.RollingFileAppender
#指定输出目录
log4j.appender.File.File = logs/ssm.log
#是否立即输出
log4j.appender.File.ImmediateFlush = true
#定义文件最大大小
log4j.appender.File.MaxFileSize = 10MB
#输出到文件的日志，如果换成DEBUG表示输出DEBUG以上级别日志
log4j.appender.File.Threshold = debug
log4j.appender.File.layout = org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n

###
# Log4j支持两种配置文件格式，一种是XML格式的文件，一种是Java特性的文件（键=值）。
# log4j.properties文件可直接放在main/resource文件夹下，手动指定文件位置需要通过PropertyConfigurator.configure("文件位置");
# 在需要记录日志的地方用static Logger logger = Logger.getLogger ( ServerWithLog4j.class.getName () ) ; 获取log4j的对象，logger.debug(),log.info().....
###

###
# 设置根记录器的配置，其语法为：log4j.rootLogger = [ level ] , appenderName1, appenderName2, …appenderNameN
# level用于设置日志记录的优先级，有系统自定义的8中类型，也可以自定义，官方建议只是用这四种 ERROR>WARN>INFO>DEBUG
# appenderNameN用于设置日志的输出地，可以设置多个，可以自定义名称
###
#log4j.rootLogger = debug,stdout,D,E,F

###
# 设置日志记录的输出地，其语法为：
#    log4j.appender.appenderName = fully.qualified.name.of.appender.class
#　　 log4j.appender.appenderName.option1 = value1
#　　 …
#　　log4j.appender.appenderName.optionN = valueN


# fully.qualified.name.of.appender.class：指日志输出目的类的全路径类名，有一些预定义，如下：
# org.apache.log4j.ConsoleAppender #控制台 
# org.apache.log4j.FileAppender #日志文件 
# org.apache.log4j.DailyRollingFileAppender #每天产生一个日志文件 
# org.apache.log4j.RollingFileAppender #文件大小到达指定尺寸的时候产生一个新的文件 
# org.apache.log4j.WriterAppender #将日志信息以流格式发送到任意指定的地方 
# org.apache.log4j.jdbc.JDBCAppender #数据库 
# org.apache.log4j.net.JMSAppender # JMS（Java消息服务）
# org.apache.log4j.net.SocketAppender #Socket 
# org.apache.log4j.net.SMTPAppender #邮件
#
#
# optionN/valueN ：分别是指对应的输出目的地属性和设置的属性值
#常用的属性如下：
# 1）Threshold：设置日志信息输出的级别
# 2）ImmediateFlush：设置日志信息是否被立即输出，默认为TRUE，立即输出
# 3）Target：设置日志信息输出的目标流，有两种值System.out和System.err ,默认值System.out(err为红色,out为黑色)
# 4）layout：设置日志信息输出的样式，值可设置为
#		org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#		org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#		org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#		org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
# 5）Encoding：设置文件的编码格式，默认和系统平台的编码格式保持一致
#

# 用layout.ConversionPattern配置日志的输出样式时各符号代表的含义，
# %p  输出日志信息的优先级,即DEBUG,INFO,WARN,ERROR,FATAL     
# %d  输出日志时间点的日期或时间 ,也可以指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}
# %r  输出自应用程序启动到输出该log信息耗费的毫秒数        
# %t  输出产生该日志事件的线程名 
# %l  输出日志事件的发生位置 ,相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数，例如：test.TestLog4j.main(TestLog4j.java:10)
# %c  输出日志信息所属的类，通常就是所在类的全名       
# %M  输出产生日志的信息的方法名       
# %F  输出日志消息产生时所在的文件名称        
# %L  输出代码中的行号        
# %m  输出代码中指定的具体日志信息      
# %n  输出一个回车换行符 ，  Windws平台为”rn”,Unix/Linux平台为”n”
# %x  输出和当前线程相关联的DNC(嵌套诊断环境），尤其用到像java servlets这样的多客户多线程的应用中      
# %%  输出一个%字符
###
#log4j.appender.stdout = org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.Target = System.out
#log4j.appender.stdout.Encoding = Utf-8
#log4j.appender.stdout.Threshold = INFO
#log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern = [%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n


###
# 输出信息到文件，但是这个文件是可控的，当文件的大小达到某个阈值的时候，日志文件会自动回滚，其常用的可选的配置有如下几个：
# 1）Threshold：设置日志信息输出的级别
# 2）ImmediateFlush：设置日志信息是否被立即输出，默认为TRUE，立即输出
# 3）File：设置日志信息输出全路径，比如：E://logs/RollingFileAppender.log
# 4）layout：设置日志信息输出的样式
# 5）Encoding：设置文件的编码格式，默认和系统平台的编码格式保持一致
# 6）Append：设置是否将日志消息追加到指定的文件中，默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容
# 7）MaxFileSize：设置当文件达到此阈值的时候自动回滚，单位可以是KB，MB，GB，默认单位是KB
# 8）MaxBackupIndex：设置保存备份回滚日志的最大个数
###
#log4j.appender.F = org.apache.log4j.RollingFileAppender
#log4j.appender.F.File =E://logs/RollingFileAppender.log
#log4j.appender.F.Append = true
#log4j.appender.F.Threshold = INFO
#log4j.appender.F.MaxFileSize = 1
#log4j.appender.F.MaxBackupIndex = 5
#log4j.appender.F.layout = org.apache.log4j.PatternLayout
#log4j.appender.F.layout.ConversionPattern = [%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n