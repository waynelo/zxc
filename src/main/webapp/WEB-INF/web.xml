<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
  <display-name>95lwh</display-name>
  
  <!-- spring 配置 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
    <!-- spring配置文件地址配置 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:config/applicationContext.xml</param-value>
	</context-param>
	
	<!-- ================spring mvc 适配器================ -->  
    <servlet>  
        <servlet-name>springMVC</servlet-name>  
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
        <!-- springmvc配置文件配置，若不配置，框架会在web应用的 WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 的配置文件，生成文件中定义的bean -->
        <init-param>  
            <param-name>contextConfigLocation</param-name>
            <!-- springmvc配置文件所在的地址 -->  
            <param-value>classpath:config/applicationContext-MVC.xml</param-value>  
        </init-param>  
        <load-on-startup>1</load-on-startup>  
    </servlet>  
    <!-- 拦截的类型，这里配置的拦截所有 -->
    <servlet-mapping>  
        <servlet-name>springMVC</servlet-name>  
        <url-pattern>/</url-pattern>  
    </servlet-mapping>

    <!-- 防止SpringMVC的拦截器拦截静态文件，需加上这个配置，否则不能正常访问静态资源 。
                       另外，springmvc的配置文件中也有类似的配置，这里只配置了一部分静态资源的类型 -->
    <!-- 激活Tomcat的defaultServlet来处理静态文件,需为每个类型的文件配置一个URLPattern -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>  
	
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	
</web-app>